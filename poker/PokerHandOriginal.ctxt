#BlueJ class context
comment0.params=originalHand
comment0.target=PokerHandOriginal(java.util.List)
comment0.text=\r\n\ constructor,\ takes\ an\ List\ of\ cards,\ the\ hand\ to\ be\ evaluated.\ Can\ contain\ up\ to\ 7\ cards\r\n
comment1.params=originalHand
comment1.target=void\ setNewPokerHand(java.util.List)
comment10.params=rank\ c
comment10.target=boolean\ hasRank(int,\ java.util.List)
comment10.text=\r\n\ returns\ true\ if\ hand\ contains\ a\ card\ with\ a\ rank\ (integer\ from\ 2-14,\ 14\ being\ an\ ace)\ of\ the\ int\ given\r\n
comment11.params=cards\ straightFlushCheck
comment11.target=boolean\ hasStraight(java.util.List,\ boolean)
comment11.text=\r\n\ returns\ true\ if\ the\ given\ List\ of\ cards\ contains\ a\ straight,\ if\ the\ method\ is\ being\ called\ on\r\n\ the\ impCards\ method\ to\ determine\ if\ cards\ making\ up\ a\ flush\ contain\ a\ straight,\ the\ boolean\ is\ set\ to\ true\r\n
comment12.params=
comment12.target=int\ hasFlush()
comment12.text=\r\n\ returns\ the\ value\ of\ the\ suit\ of\ the\ flush\ if\ hand\ contains\ a\ \r\n\ flush\ and\ 0\ if\ there\ is\ no\ flush\ and\ moves\ the\ cards\ of\ the\ flush\ suit\ into\ impCards\r\n
comment13.params=suit
comment13.target=void\ fillImpCardsFlush(int)
comment14.params=
comment14.target=boolean\ hasStraightFlush()
comment14.text=\r\n\ returns\ true\ if\ hand\ has\ a\ straight\ flush\ and\ moves\ the\ lowest\ card\ of\ the\ straight\ into\ impCards\r\n
comment15.params=i
comment15.target=int\ impCardRank(int)
comment15.text=\r\n\ returns\ the\ rank\ of\ the\ card\ in\ impCards\ that\ is\ the\ given\ integer\ far\ in\ the\ list\r\n\ however,\ duplicates\ are\ skipped,\ so\ 1,1,2,2\ with\ a\ 2\ passed\ in\ returns\ 2\r\n
comment16.params=i
comment16.target=int\ highCardRank(int)
comment16.text=\r\n\ returns\ the\ same\ value\ as\ impCardRank()\ but\ from\ hand,\ which\ contains\ cards\ that\ may\ be\ pertinent\r\n\ to\ tie\ breaking\ and\ high\ cards\r\n
comment17.params=other
comment17.target=int\ beats(PokerHandOriginal)
comment17.text=\r\n\ returns\ 1\ if\ this\ beats\ the\ given\ hand\r\n\ returns\ 0\ if\ the\ given\ hand\ beats\ this\r\n\ returns\ 2\ if\ tie\r\n
comment2.params=
comment2.target=java.util.List\ getHand()
comment2.text=\r\n\ returns\ the\ List\ hand\r\n
comment3.params=
comment3.target=java.lang.String\ toString()
comment3.text=\r\n\ return\ the\ string\ representation\ of\ this\ class,\ PokerHand\r\n
comment4.params=
comment4.target=void\ trimImpCards()
comment4.text=\r\n\ If\ the\ hand\ contains\ a\ three\ of\ a\ kind\ and\ two\ pairs,\ this\ method\ is\ called\ to\ remove\ the\ lower\r\n\ of\ the\ two\ pairs\ from\ impCards\ so\ that\ what\ is\ left\ are\ te\ cards\ relevant\ to\ the\ full\ house\r\n
comment5.params=
comment5.target=int\ hasWhat()
comment5.text=\r\n\ returns\ an\ int\ representing\ what\ the\ hand\ contains\r\n
comment6.params=
comment6.target=java.util.List\ impCards()
comment7.params=
comment7.target=boolean\ hasPair()
comment7.text=\r\n\ returns\ true\ if\ the\ hand\ has\ a\ pair,\ moves\ the\ pair\ from\ hand\ to\ impCards\r\n
comment8.params=
comment8.target=boolean\ hasFourOfAKind()
comment8.text=\r\n\ returns\ true\ if\ the\ hand\ has\ a\ four\ of\ a\ kind,\ moves\ the\ four\ of\ a\ kind\ from\ hand\ to\ impCards\r\n
comment9.params=
comment9.target=boolean\ hasThreeOfAKind()
comment9.text=\r\n\ returns\ true\ if\ the\ hand\ has\ a\ three\ of\ a\ kind,\ and\ moves\ the\ three\ of\ a\ kind\ from\ hand\ to\ impCards\r\n
numComments=18
